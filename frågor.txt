# När använder man 'add' respektive 'commit'?
You want to use 'git add' when you want to move your changes into the staging area where you can then commit...
to commit means writing an explanatory message to what you have changed.

# Vad är 'pull' respektiv 'push'?
'push' and 'pull' are used when wanting to access remote repositories
'git push' loads in data to a remote repository
'git pull' fetches new commits/data from a remote repository into our own home repository

# När använder man 'log' respektiv 'status'
'log' is used when you want to look in your commit history.
To check if there is any modfied data or data that needs to be commited you can check the status of your current repository with the subcommand 'status'

# Vad är en Git branch och varför är de viktiga?
a git branch is a duplicated version of your current master repository.
it's important to be able to duplicate your master if you want to be able to change files, fix bugs or test ideas without ruining your whole project in the main branch.
Branches are also very useful in group projects. you both want to try out your changes and communicate your process without harming the base project. 





# SIKTAR PÅ VG
# Det finns flera sätt att rulla tillbaka koden till ett tidigare tillstånd. 
# Förklara skillnaden och motivera när man skulle använda den ena eller andra metoden. 
# Ge exempel på de kommandon du använder för att göra detta och vissa att det fungerar, 
# vilken output du fick från git-kommandona.
# Tips: Gör exemplen med att backa i en branch så att master fortfarande är korrekt. 
There are 2 ways to go back into earlier stages of your edits:

'reset'
When wanting to regret a change you have made you can easily reset that change with the subcommand reset 
along with the specified arguments explaining where you want to reset too in your history. 
Doing this will erase the history up until the specified working directory you wanted to reset to.

'revert'
Reverting your changes works the same BUT instead of erasing it doesn't erase anything in the history 
but adds a new commit with the given past working directory history.

Here are some exmaples:

'reset'
$ git log --oneline
	d611b85 (HEAD -> resetTest, origin/main, step-VG, main) explained revert and reset in frågor.txt file
	a671d7d (step-5) answered questions 3 and 4
	11ad104 answered the two first questions
	cab04b1 created frågor.txt file
	bc5ed21 (step-4) inserted into script - outputs, compiler, game runner and then removing class files
$ git reset --hard HEAD~3
	HEAD is now at cab04b1 created frågor.txt file
$ git log --oneline
	cab04b1 (HEAD -> resetTest) created frågor.txt file
	bc5ed21 (step-4) inserted into script - outputs, compiler, game runner and then removing class files
$ git switch main
	Switched to branch 'main'
	Your branch is up to date with 'origin/main'.
$ git log --oneline
	d611b85 (HEAD -> main, origin/main, step-VG) explained revert and reset in frågor.txt file
	a671d7d (step-5) answered questions 3 and 4
	11ad104 answered the two first questions
	cab04b1 (resetTest) created frågor.txt file
	bc5ed21 (step-4) inserted into script - outputs, compiler, game runner and then removing class files
